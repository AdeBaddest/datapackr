{
    "collab_server" : "",
    "contents" : "################################\n# Script creation of Data Pack #\n################################\n\nget_ou_info <- function(ou_uid = NA) {\n    if ( is.na(ou_uid) ) { \n        print(paste(\"Must supply single OU uid\")) \n        stop()\n        }\n    url <- URLencode(paste0(getOption(\"baseurl\"),\"api/organisationUnits.json?&filter=id:eq:\",ou_uid,\"&fields=name&paging=false\"))\n    sig<-digest::digest(url,algo='md5', serialize = FALSE)\n    ou_info<-datimvalidation::getCachedObject(sig)\n    if (is.null(ou_info)){\n        r<-httr::GET(url,httr::timeout(600))\n        if (r$status == 200L ){\n            r<- httr::content(r, \"text\")\n            ou_info<-jsonlite::fromJSON(r,flatten=TRUE)[[1]]\n            datimvalidation::saveCachedObject(ou_info,sig)\n        } else {\n            print(paste(\"Could not retreive OU name\",httr::content(r,\"text\")))\n            stop()\n        }\n    }\n    return( as.character(ou_info ) )\n}\n\nwrite_DP_home <- function(wb, ou_uid, ou_name, styles) {\n    \n    # Add Tab\n        openxlsx::addWorksheet(wb,\n                               sheetName = \"Home\",\n                               gridLines = FALSE,\n                               tabColour = \"#808080\")\n    # Subtitle\n        openxlsx::writeData(wb, \"Home\", \"PEPFAR\", xy = c(2,2), colNames = F)\n        openxlsx::addStyle(wb, \"Home\", styles$dataPack$home$subtitle, rows = 2, cols = 2)\n        \n    # Title\n        openxlsx::writeData(wb, \"Home\", \"COP19 Data Pack\", xy = c(2,10), colNames = F)\n        openxlsx::addStyle(wb, \"Home\", styles$dataPack$home$title, rows = 10, cols = 2)\n        \n    # ou_name\n        openxlsx::writeData(wb, \"Home\", toupper(ou_name), xy = c(2,20), colNames = F)\n        openxlsx::addStyle(wb, \"Home\", styles$dataPack$home$ou_name, rows = 20, cols = 2)\n        \n    # ou_uid\n        openxlsx::writeData(wb, \"Home\", ou_uid, xy = c(2,25), colNames = F)\n    \n    # Generated:\n        openxlsx::writeData(wb, \"Home\", paste(\"Generated on:\", Sys.time()), xy = c(2, 27), colNames = F)\n    \n    # Package version\n        openxlsx::writeData(wb,\"Home\",\n            paste(\"Package version:\"), #, as.character(packageVersion(\"datapackimporter\"))),\n            xy = c(2, 29))\n}\n\nwrite_DP_sheet <- function(wb, ou_uid, styles, sheet_name, schema) {\n\n    if (sheet_name %in% c(\"Epi Cascade I\",\"Epi Cascade II\",\"Epi PMTCT\",\"Prioritization\")) {\n        tabColor = \"#C00000\"\n    } else\n        tabColor = \"#0070C0\"\n    \n    # Add Tab\n    openxlsx::addWorksheet(\n        wb,\n        sheet_name,\n        gridLines = T,\n        tabColour = tabColor\n    )\n    \n    data <- schema %>%\n        group_by(header) %>%\n        mutate(headerN = 1:n()) %>%\n        ungroup() %>%\n        group_by(header,colType) %>%\n        mutate(colTypeN = 1:n()) %>%\n        ungroup() %>%\n        mutate(header = case_when(headerN == 1 ~ header,\n                                  TRUE ~ NA_character_),\n               colType = case_when(colTypeN == 1 ~ colType,\n                                   TRUE ~ NA_character_),\n               formula = case_when(calcType %in% c(\"export\",\"model\") ~ NA_character_,\n                                   formula == \"<NA>\" ~ NA_character_,\n                                   TRUE ~ formula),\n               label = case_when(label == \"<NA>\" ~ NA_character_,\n                                 TRUE ~ label),\n               valueType = case_when(valueType == \"Text\" ~ NA_character_,\n                                     valueType == \"Numeric\" ~ paste0(\"=SUBTOTAL(109,\",int2col(col_num),\":\",int2col(col_num),\")\"),\n                                     valueType == \"Percent\" ~ paste0('=\"~ \"&ROUND(SUBTOTAL(101,',int2col(col_num),\":\",int2col(col_num),')*100,0)&\"%\"'),\n                                     TRUE ~ NA_character_\n               )\n        ) %>%\n        select(header, colType, label, valueType, uid) %>%\n        t()\n    \n    headerCols = schema %>%\n        filter(colType == \"Header\") %>%\n        mutate(headerCols = max(col_num)) %>%\n        select(headerCols) %>% unique() %>% as.numeric()\n    \n    #Write columns\n    openxlsx::writeData(wb, sheet = sheet_name, data, xy = c(1,1), colNames = F)\n    \n    #Add Styles\n        ##Title\n            openxlsx::addStyle(wb, sheet = sheet_name, styles$dataPack$sheet$title, rows = 1, cols = 1:headerCols)\n        ##Headers\n            openxlsx::addStyle(wb, sheet = sheet_name, styles$dataPack$sheet$header, rows = 1, cols = (headerCols+1):NCOL(data))\n        ##Column Type tags\n            openxlsx::addStyle(wb, sheet = sheet_name, styles$dataPack$sheet$colType, rows = 2, cols = (headerCols+1):NCOL(data))\n        ##Labels\n            openxlsx::addStyle(wb, sheet = sheet_name, styles$dataPack$sheet$label, rows = 3, cols = (headerCols+1):NCOL(data))\n        ##UIDs\n            openxlsx::addStyle(wb, sheet = sheet_name, styles$dataPack$sheet$uid, rows = 5, cols = (headerCols+1):NCOL(data))\n        ##Row titles\n            openxlsx::addStyle(wb, sheet = sheet_name, styles$dataPack$sheet$rowHeader, rows = 5, cols = 1:headerCols)\n        ##Target Columns\n            openxlsx::addStyle(wb,\n                           sheet = sheet_name,\n                           styles$dataPack$sheet$target,\n                           rows = 1:1000,\n                           cols = schema[schema$colType %in% c(\"Targets\",\"Projected\"),c(\"col_num\")]$col_num,\n                           gridExpand = T,\n                           stack = T)\n        ##Percent Columns\n            openxlsx::addStyle(wb,\n                               sheet = sheet_name,\n                               styles$dataPack$sheet$percent,\n                               rows = 1:1000,\n                               cols = schema[schema$valueType == \"Percent\",c(\"col_num\")]$col_num,\n                               gridExpand = T,\n                               stack = T)\n        ##Numeric Columns\n            openxlsx::addStyle(wb,\n                               sheet = sheet_name,\n                               styles$dataPack$sheet$numeric,\n                               rows = 1:1000,\n                               cols = schema[schema$valueType == \"Numeric\",c(\"col_num\")]$col_num,\n                               gridExpand = T,\n                               stack = T)\n    \n    #Adjust Column Widths\n        openxlsx::setColWidths(wb,\n                               sheet = sheet_name,\n                               cols = c(1,2,3,4),\n                               widths = c(30,20,10,6))\n        openxlsx::setColWidths(wb,\n                               sheet = sheet_name,\n                               cols = (headerCols+1):NCOL(data),\n                               widths = 10)\n    \n        ##Hide columns\n            cols = schema[schema$hidden == \"Y\",c(\"col_num\")]$col_num\n            openxlsx::setColWidths(wb,\n                                   sheet = sheet_name,\n                                   cols = cols,\n                                   hidden = rep(T, length(cols)))\n    \n    #Adjust Row Heights\n        openxlsx::setRowHeights(wb,\n                                sheet = sheet_name,\n                                rows = c(1,3),\n                                heights = c(30,120))\n    \n    #Roll-up row\n    #  subtotal_formulas <- data[4,]\n    #  for (i in 1:(length(subtotal_formulas))) {\n    #      openxlsx::writeFormula(wb, sheet_name, subtotal_formulas[i], xy = c(i, 4))\n    #  }\n    # \n    # i = 5\n    rollup <- schema[schema$hidden == \"Y\",c(\"col_num\")]$col_num[[1]] - 1\n    openxlsx::writeData(wb,\n                        sheet = sheet_name,\n                        x = \"Roll-up\",\n                        xy = c(rollup,4),\n                        colNames = F)\n    openxlsx::addStyle(wb,\n                       sheet = sheet_name,\n                       styles$dataPack$sheet$rollupStyle,\n                       rows = 4,\n                       cols = rollup,\n                       stack = T)\n    \n#Freeze Panes\n    openxlsx::freezePane(wb,\n                         sheet = sheet_name,\n                         firstActiveRow = 6,\n                         firstActiveCol = headerCols+1)\n    \n}\n\nstyleGuide <- function() {\n    return(list(\n            dataPack = list(\n                home = list(\n                    title = openxlsx::createStyle(fontColour = \"#000000\",\n                                                   fontSize = 76,\n                                                   textDecoration = \"bold\",\n                                                   halign = \"left\",\n                                                   valign = \"center\"),\n                    subtitle = openxlsx::createStyle(fontColour = \"#7F7F7F\",\n                                                      fontSize = 36,\n                                                      halign = \"left\",\n                                                      valign = \"center\"),\n                    ou_name = openxlsx::createStyle(fontColour = \"#9CBEBD\",\n                                                     fontSize = 64,\n                                                     textDecoration = \"bold\",\n                                                     halign = \"left\",\n                                                     valign = \"center\")\n                    ),\n                sheet = list(\n                    title = openxlsx::createStyle(fontSize = 18,\n                                                   textDecoration = \"bold\",\n                                                   halign = \"left\",\n                                                   valign = \"center\"),\n                    header = openxlsx::createStyle(fontSize = 18,\n                                                    textDecoration = \"bold\",\n                                                    halign = \"left\",\n                                                    valign = \"center\",\n                                                    fgFill = \"#E4E0A7\"),\n                    colType = openxlsx::createStyle(fontSize = 14,\n                                                     textDecoration = \"italic\",\n                                                     halign = \"left\"),\n                    label = openxlsx::createStyle(wrapText = TRUE,\n                                                   halign = \"center\",\n                                                   valign = \"center\",\n                                                   fgFill = \"#9CBEBD\"),\n                    uid = openxlsx::createStyle(textDecoration = \"bold\",\n                                                 fgFill = \"#C2D8D8\",\n                                                 fontColour = \"#C2D8D8\"),\n                    numeric = openxlsx::createStyle(numFmt = \"COMMA\"),\n                    percent = openxlsx::createStyle(numFmt = \"0%\"),\n                    rowHeader = openxlsx::createStyle(textDecoration = \"bold\",\n                                                      fgFill = \"#C2D8D8\",\n                                                      fontColour = \"#000000\"),\n                    target = openxlsx::createStyle(textDecoration = \"bold\"),\n                    rollupStyle = openxlsx::createStyle(halign = \"right\")\n                )\n            )\n        )\n    )\n        \n}\n\nwrite_DataPack <- function(ou_uid, output_file_path) {\n    \n    #Get OU Name\n        ou_name = get_ou_info(ou_uid)\n    \n    #Create New Workbook\n        wb <- openxlsx::createWorkbook()\n        \n    #Load Style Guide\n        styles <- styleGuide()\n        \n    #Modify Base Font\n        openxlsx::modifyBaseFont(wb, fontName = \"Calibri\", fontSize = 11)\n        \n    #Write Home Page\n        write_DP_home(wb = wb, ou_uid = ou_uid, ou_name = ou_name, styles = styles)\n        \n    #Write Sheets\n        schemas <- read.csv(\"/Users/scott/Documents/GitHub/COP-19-Target-Setting/data-raw/Data Pack schema.csv\",stringsAsFactors = F) %>%\n            group_by(mode, sheet_name) %>%\n            nest()\n        \n        for (i in 1:(length(schemas$sheet_name))) {\n            sheet_name = schemas$sheet_name[[i]]\n            schema = schemas$data[[i]]\n            write_DP_sheet(wb = wb, ou_uid = ou_uid, styles = styles, sheet_name = sheet_name, schema = schema)\n        }\n            \n    #Save Workbook\n        output_file_name <- paste0(\n            output_file_path,\n            \"/COP19DataPack_\",\n            ou_name,\n            \"_\",\n            format(Sys.time(), \"%Y%m%d%H%M%S\"),\n            \".xlsx\"\n        )\n        \n        openxlsx::saveWorkbook(\n            wb = wb,\n            file = output_file_name,\n            overwrite = TRUE\n        )\n        print(paste0(\"Successfully saved output to \", output_file_name))\n}",
    "created" : 1544238659449.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "4|38|24|0|\n26|56|55|0|\n57|68|192|0|\n194|26|245|0|\n247|54|291|0|\n",
    "hash" : "224997920",
    "id" : "39C277CB",
    "lastKnownWriteTime" : 1544403537,
    "last_content_update" : 1544403543513,
    "path" : "~/Documents/GitHub/COP-19-Target-Setting/R/writetemplate_DataPack.R",
    "project_path" : "writetemplate_DataPack.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}